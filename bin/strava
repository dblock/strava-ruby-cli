#!/usr/bin/env ruby
require 'gli'
require 'ripl'

require_relative '../lib/strava-ruby-cli'

class App
  extend GLI::App

  program_desc "Command-line client for Strava #{Strava::VERSION}."
  version Strava::Cli::VERSION

  switch %i[v verbose], desc: 'Produce verbose output', default_value: false
  flag %i[i client_id], desc: 'Strava client ID', default_value: ENV['STRAVA_CLIENT_ID']
  flag %i[s client_secret], desc: 'Strava client secret', default_value: ENV['STRAVA_CLIENT_SECRET']
  flag %i[t access_token], desc: 'Strava access token', default_value: ENV['STRAVA_ACCESS_TOKEN']
  flag %i[p scope], desc: 'Strava access scope', default_value: ENV['STRAVA_ACCESS_SCOPE'] || 'read_all'

  arguments :strict
  subcommand_option_handling :normal

  default_command :help

  pre do |global_options, _command, options, _args|
    options = global_options.dup
    $auth = Strava::Cli::Auth.new(options)
    $verbose = options.fetch(:verbose)
    true
  end

  desc 'Opens a Strava console'
  command :console do |c|
    c.action do |_global_options, _options, _args|
      Strava::Cli::Console.new($auth.access_token).start!
    end
  end

  desc 'Runs a command.'
  arg_name 'command', :multiple
  command :run do |c|
    c.action do |_global_options, _options, args|
      Strava::Cli::Console.new($auth.access_token).run(args)
    end
  end

  on_error do |e|
    warn "Error: #{e.message}"
    if $verbose
      case e
      when Strava::Errors::Fault then
        warn ' ' + e.to_s
        warn ' ' + e.errors.map(&:to_s).join("\n  ")
      else
        warn '  ' + e.backtrace.join("\n  ")
      end
    end
    false
  end
end

exit App.run(ARGV)
